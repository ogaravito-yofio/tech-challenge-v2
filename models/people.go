// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// People people
//
// swagger:model People
type People struct {

	// birthdate
	// Required: true
	// Format: date
	Birthdate *strfmt.Date `json:"birthdate"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// location
	Location *Location `json:"location,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// photo
	// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
	// Format: byte
	Photo strfmt.Base64 `json:"photo,omitempty"`
}

// Validate validates this people
func (m *People) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBirthdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoto(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *People) validateBirthdate(formats strfmt.Registry) error {

	if err := validate.Required("birthdate", "body", m.Birthdate); err != nil {
		return err
	}

	if err := validate.FormatOf("birthdate", "body", "date", m.Birthdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *People) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *People) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *People) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *People) validatePhoto(formats strfmt.Registry) error {

	if swag.IsZero(m.Photo) { // not required
		return nil
	}

	if err := validate.Pattern("photo", "body", string(m.Photo), `^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *People) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *People) UnmarshalBinary(b []byte) error {
	var res People
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
